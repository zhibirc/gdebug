Dimensions of good logs:

- context
- purpose
    - debugging
    - UX
- importance
    - actions
- format
    - scannable
    - parsable

It's may be useful to add readable data and time before actual log message (for example, if we use logging for users log-in). [!](can be realized with tunable prefixes in config: date/time, emoticon, something...)
Objects should be in readable form (not "[object Object]") in any case.
An example of context is IP address and ID in log when user signs in.

Example scheme:

Name: "tracing"
Goal: debugging
Content: state changes
Audience: devs

Name: "event"
Goal: analytics
Content: actions and exceptions
Audience: admins/product owners/devs

Name: "progress"
Goal: UX
Content: percentage/errors, RUOK?
Audience: users

Name: "audit/result"
Goal: verification of behaviour
Content: summaries
Audience: compliance/business


Logging golden rules (depends on the context):

- remember the reader
- no personal data
- answer the questions!


--------------- LOG LEVELS ----------------

- add log levels for different logging ways (for example, for suppressing all logs but errors)

Example of log level separation description:

Trace - Only when I would be "tracing" the code and trying to find one part of a function specifically.

Debug - Information that is diagnostically helpful to people more than just developers (IT, sysadmins, etc.).

Info - Generally useful information to log (service start/stop, configuration assumptions, etc). Info I want to always have available but usually don't care about under normal circumstances. This is my out-of-the-box config level.

Warn - Anything that can potentially cause application oddities, but for which I am automatically recovering. (Such as switching from a primary to backup server, retrying an operation, missing secondary data, etc.)

Error - Any error which is fatal to the operation, but not the service or application (can't open a required file, missing data, etc.). These errors will force user (administrator, or direct user) intervention. These are usually reserved (in my apps) for incorrect connection strings, missing services, etc.

Fatal - Any error that is forcing a shutdown of the service or application to prevent data loss (or further data loss). I reserve these only for the most heinous errors and situations where there is guaranteed to have been data corruption or loss.


--------------- OTHER ---------------------

- timestamps as prefixes (one of many other choices and combinations);
- filters;
- "lazy logging";
- markers;
- modularity;
- speed and performance in common.

Appenders or Handlers? This is important due to readability.

